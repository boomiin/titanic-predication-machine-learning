# -*- coding: utf-8 -*-
"""APPRENTISSAGE_DU_TITANIC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13rqGoL3H5TDNIuY5efvjTyUEDH7JziWA
"""
import pymongo
from pymongo import MongoClient
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report,r2_score, mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from joblib import dump
connection_str="mongodb+srv://estia2022:estia2022@hupimongocluster.rxgzj.mongodb.net/myFirstDatabase?retryWrites=true&w=majority"


#connexion a la base de donnee
try:
    client= MongoClient(connection_str)
    print(client.info)
    print("connexion a la base de donnee reussie")
except:
    print("Une erreur est survenue lors de la connexion a la base de donnee.")
    print("chaine de connexion : ",connection_str)
    exit()

#importation des donnees de Titanic
uppa = client.uppa
titanic = pd.DataFrame(list(client.uppa.titanic.find()))
titanic.head()

#suppression des variables inutiles
titanic.drop(columns="_id",inplace=True)
titanic.drop(columns="PassengerId",inplace=True)
titanic.drop('Cabin',axis=1,inplace=True)
titanic.drop('Name',axis=1,inplace=True)
titanic.drop('Ticket',axis=1,inplace=True)
titanic.drop('Parch',axis=1,inplace=True)

titanic.head()

titanic.Age=titanic.Age.astype(float)
titanic.Fare=titanic.Fare.astype(float)
titanic[["Age","Fare","Pclass","Sex","Embarked"]].dtypes

#remplacer les valeurs manquantes de la variable Age
def impute_age(cols):
    Age = cols[0]
    Pclass = cols[1]    
    if pd.isnull(Age):
        if Pclass == 1:
            return 37
        elif Pclass == 2:
            return 29
        else:
            return 24
    else:
        return Age
   #remplacer les valeurs nan 
titanic['Age'] = titanic[['Age','Pclass']].apply(impute_age,axis=1)

titanic= pd.get_dummies(
    titanic, columns=["Pclass","Sex","Embarked"])
titanic

titanic.columns

#transformation des variables
#numeric=StandardScaler().fit_transform(titanic[["Age","Fare"]])
#categoriq=OneHotEncoder().fit_transform(titanic[["Pclass","Sex","Embarked"]]).toarray()
#X=pd.concat([pd.DataFrame(numeric),pd.DataFrame(categoriq)],axis=1)

#display(X)
X_train, X_test, y_train, y_test = train_test_split(titanic[["Age","Fare",'Pclass_1','Pclass_2', 'Pclass_3','Sex_female', 'Sex_male','Embarked_C',
       'Embarked_Q', 'Embarked_S']], titanic['Survived'], test_size=0.30, random_state=101)
#X_train, X_test, y_train, y_test = train_test_split(titanic[["Age","Fare","Pclass","Sex","Embarked"]], titanic['Survived'], test_size=0.30, random_state=101)

logmodel = LogisticRegression()
logmodel.fit(X_train,y_train)
predictions = logmodel.predict(X_test)
print(classification_report(y_test,predictions))
print("r2_score",r2_score(y_test,predictions))
rmsle_score=mean_squared_error(y_test,predictions,squared=False)
print("rmsle_score",rmsle_score)

dump([logmodel, rmsle_score], 'regression_model_saved.joblib', compress=1)